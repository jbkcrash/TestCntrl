@page "/generate"

<PageTitle>Generate Test Matrix</PageTitle>

@using TestCntrl.Data
@inject GenerateService GenerateConnector
@inject ScenarioService ScenarioConnector
@inject PositionService PositionConnector

<PageTitle>Test Cases</PageTitle>

<h3>Select a Scenario</h3>

@if(ScenarioArray == null)  
{  
<p>  
    <em>Loading ...</em>  
</p>  
}  
else  
{  
<select class="custom-select"  @onchange="OnValueChanged" title="Select a Scenario">  
    <option value="Select" selected disabled="disabled">(Select Scenario)</option>  
@foreach (var scenario in ScenarioArray)  
{  
    <option value="@scenario.id"> @scenario.id - @scenario.description</option>
}  
</select>  
}  


@if (TestCaseArray == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @foreach( var posString in TestCaseList.positionList ) {
                        if(posString is "osp" ) {<th>OSP</th>}
                        if(posString is "lis" ) {<th>LIS</th>}
                        if(posString is "plis" ) {<th>pLIS</th>}
                        if(posString is "adr" ) {<th>ADR</th>}
                        if(posString is "padr" ) {<th>pADR</th>}
                        if(posString is "obcf" ) {<th>oBCF</th>}
                        if(posString is "ibcf" ) {<th>iBCF</th>}
                        if(posString is "esrp" ) {<th>ESRP</th>}
                        if(posString is "ecrf" ) { <th>ECRF</th>}
                        if(posString is "policy" ) {<th>Policy Store</th>}
                        if(posString is "ebcf" ) { <th>eBCF</th>}   
                        if(posString is "che" ) {<th>CHE</th>}
                        if(posString is "logger") {<th>Logger</th>}
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var TestCase in TestCaseArray)
            {
                <tr>
                    @foreach( var posString in TestCaseList.positionList ) {
                        if(posString is "osp" ) {<td>@TestCase.osp</td>}
                        if(posString is "lis" ) {<td>@TestCase.lis</td>}
                        if(posString is "plis" ) {<td>@TestCase.plis</td>}
                        if(posString is "adr" ) {<td>@TestCase.adr</td>}
                        if(posString is "padr" ) {<td>@TestCase.padr</td>}
                        if(posString is "obcf" ) {<td>@TestCase.obcf</td>}
                        if(posString is "ibcf" ) {<td>@TestCase.ibcf</td>}
                        if(posString is "esrp" ) {<td>@TestCase.esrp</td>}
                        if(posString is "ecrf" ) { <td>@TestCase.ecrf</td>}
                        if(posString is "policy" ) {<td>@TestCase.policy</td>}
                        if(posString is "ebcf" ) { <td>@TestCase.ebcf</td>}   
                        if(posString is "che" ) {<td>@TestCase.che</td>}
                        if(posString is "logger") {<td>@TestCase.logger</td>}
                    }
                </tr>
            }
        </tbody>
    </table>
}





@code {
    private TestCaseObject[]? TestCaseArray;
    private ScenarioObject[]? ScenarioArray;

    private PositionListObject? TestCaseList;
    //private string tableDefinition = "";

    protected override async Task OnInitializedAsync()
    {
        //TestCaseArray = await GenerateConnector.GetTests("sc_1");
        ScenarioArray = await ScenarioConnector.GetScenarios();
    }
    private async Task OnValueChanged(ChangeEventArgs e) {
        //TODO get the positions file from the scenario that is selected
        string strSelectedScenario = e.Value.ToString();
        string strPositionsFileName = "";
        //Look in the scenario array for our item
        foreach(ScenarioObject scenarioObject in ScenarioArray){
            if(scenarioObject.id.ToString() == strSelectedScenario) strPositionsFileName = scenarioObject.bench.ToString();
        }

        TestCaseList = await PositionConnector.GetPositionList(strPositionsFileName);

        
        
        // We have a list of positions... new we need to get the tests based on those positions.
        TestCaseArray = await GenerateConnector.GetTests(strSelectedScenario, TestCaseList );
        //string Value = e.Value.ToString();
        //EventCallback<string> ValueChanged;  
        //return ValueChanged.InvokeAsync(Value);  
    } 
}
